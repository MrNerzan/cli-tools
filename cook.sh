#!/bin/bash

# Output executable name
OUTPUT="cli-tools"
BUILD_DIR="build"

# Temporary files (you can add other file extensions if needed)
# shellcheck disable=SC2034
TEMP_FILES="*.o"

# Functions

# Clean function (does not remove the output executable)
clean() {
    echo "Cleaning up..."
    rm -rf $BUILD_DIR  # Remove the entire build directory
    echo "Environment cleaned."
}
clean() {
    echo "Cleaning up CMake-generated files..."

    # Remove CMake cache and autogenerated files
    if [ -d "$BUILD_DIR" ]; then
        rm -f "$BUILD_DIR/CMakeCache.txt"         # Remove the CMake cache
        rm -rf "$BUILD_DIR/CMakeFiles"            # Remove the CMake files directory
        rm -f "$BUILD_DIR/*.o"                     # Remove object files
        rm -f "$BUILD_DIR/*.d"                     # Remove dependency files
        rm -f "$BUILD_DIR/*.cmake"                 # Remove CMake configuration files
        echo "CMake-generated files removed from $BUILD_DIR."
    else
        echo "$BUILD_DIR directory does not exist."
    fi

    echo "Environment cleaned."
}

# Generate documentation
generate_docs() {
    if [ -f "generate_docs.sh" ]; then
        echo "Executing generate_docs.sh..."
        ./generate_docs.sh
        # shellcheck disable=SC2181
        if [ $? -eq 0 ]; then
            echo "Documentation generation successful."
        else
            echo "Documentation generation failed."
        fi
    else
        echo "generate_docs.sh not found, skipping documentation generation."
    fi
}

# Build the program inside the build directory
build() {
    local BUILD_TYPE=$1
    local CMAKE_BUILD_TYPE=""

    if [ "$BUILD_TYPE" == "debug" ]; then
        echo "Building in debug mode..."
        CMAKE_BUILD_TYPE="Debug"
    elif [ "$BUILD_TYPE" == "release" ]; then
        echo "Building in release mode..."
        CMAKE_BUILD_TYPE="Release"
    else
        echo "Usage: $0 {build debug|build release|clean|docs|test|install_dependencies}"
        exit 1
    fi

    # Ensure the build directory exists
    mkdir -p $BUILD_DIR
    cd $BUILD_DIR || exit 1  # Navigate into the build directory

    # Configure the project using CMake
    cmake -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE .. || { echo "CMake configuration failed."; exit 1; }

    # Build the project
    cmake --build . || { echo "Build failed."; exit 1; }

    # Copy help file if the build was successful
    echo "Build successful: ./$OUTPUT"
    cp ../HELP.md ./HELP.md
}

run_tests() {
    echo "Running tests..."
    if [ -f "./tests/run_tests.sh" ]; then
        ./tests/run_tests.sh || { echo "Tests failed."; exit 1; }
    else
        echo "Test script not found, ensure it exists at ./tests/run_tests.sh"
    fi
}

install_dependencies() {
    echo "Installing dependencies..."

    # Example using apt-get (for Ubuntu/Debian)
    if command -v apt-get > /dev/null; then
        sudo apt-get update
        sudo apt-get install -y gcc make cmake libtool
        echo "Dependencies installed via apt-get."

    # Example using brew (for macOS)
    elif command -v brew > /dev/null; then
        brew update
        brew install gcc cmake libtool
        echo "Dependencies installed via brew."

    # Example using yum (for Fedora/RedHat/CentOS)
    elif command -v yum > /dev/null; then
        sudo yum install -y gcc make cmake libtool
        echo "Dependencies installed via yum."

    else
        echo "Unsupported package manager. Please install dependencies manually."
        exit 1
    fi
}

# Main logic
case $1 in
    build) build "$2" ;;
    clean) clean ;;
    docs) generate_docs ;;
    test) run_tests ;;
    install) install_dependencies ;;
    *) echo "Usage: $0 {build debug|build release|clean|docs|test|install_dependencies}" ;;
esac
